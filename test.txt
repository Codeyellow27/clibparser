======== CODE ========

void aX(void);
int a1(int param1);
int a2(int param1, param2);
void a3();
void a3(void);

int f(int arg1, char arg2)
{
    a1(arg1);
    a2(arg1, arg2);
    a3();
    a1(a1());
    a1(a1(), a2(a1(), x1));
}

compilationUnit
 translationUnit
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: void
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        id: aX
        operator: (
        parameterTypeList
         parameterList
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: void
        operator: )
    operator: ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: int
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        id: a1
        operator: (
        parameterTypeList
         parameterList
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: int
            declarationSpecifiers
             declarationSpecifier
              typeSpecifier
               typedefName
                id: param1
        operator: )
    operator: ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: int
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        id: a2
        operator: (
        parameterTypeList
         parameterList
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: int
            declarationSpecifiers
             declarationSpecifier
              typeSpecifier
               typedefName
                id: param1
          operator: ,
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              typedefName
               id: param2
        operator: )
    operator: ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: void
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        id: a3
        operator: (
        operator: )
    operator: ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: void
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        id: a3
        operator: (
        parameterTypeList
         parameterList
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: void
        operator: )
    operator: ;
  externalDeclaration
   functionDefinition
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: int
    declarator
     directDeclarator
      id: f
      operator: (
      parameterTypeList
       parameterList
        parameterDeclaration
         declarationSpecifiers2
          declarationSpecifier
           typeSpecifier
            keyword: int
          declarationSpecifiers
           declarationSpecifier
            typeSpecifier
             typedefName
              id: arg1
        operator: ,
        parameterDeclaration
         declarationSpecifiers2
          declarationSpecifier
           typeSpecifier
            keyword: char
          declarationSpecifiers
           declarationSpecifier
            typeSpecifier
             typedefName
              id: arg2
      operator: )
    compoundStatement
     operator: {
     blockItemList
      blockItem
       declaration
        declarationSpecifiers
         declarationSpecifier
          typeSpecifier
           typedefName
            id: a1
        initDeclaratorList
         initDeclarator
          declarator
           directDeclarator
            operator: (
            declarator
             directDeclarator
              id: arg1
            operator: )
        operator: ;
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          id: a2
                         operator: (
                         argumentExpressionList
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          id: arg1
                          operator: ,
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          id: arg2
                         operator: )
         operator: ;
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          id: a3
                         operator: (
                         operator: )
         operator: ;
      blockItem
       declaration
        declarationSpecifiers
         declarationSpecifier
          typeSpecifier
           typedefName
            id: a1
        initDeclaratorList
         initDeclarator
          declarator
           directDeclarator
            operator: (
            declarator
             directDeclarator
              id: a1
              operator: (
              operator: )
            operator: )
        operator: ;
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          id: a1
                         operator: (
                         argumentExpressionList
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          id: a1
                                         operator: (
                                         operator: )
                          operator: ,
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          id: a2
                                         operator: (
                                         argumentExpressionList
                                          assignmentExpression
                                           conditionalExpression
                                            logicalOrExpression
                                             logicalAndExpression
                                              inclusiveOrExpression
                                               exclusiveOrExpression
                                                andExpression
                                                 equalityExpression
                                                  relationalExpression
                                                   shiftExpression
                                                    additiveExpression
                                                     multiplicativeExpression
                                                      castExpression
                                                       unaryExpression
                                                        postfixExpression
                                                         primaryExpression
                                                          id: a1
                                                         operator: (
                                                         operator: )
                                          operator: ,
                                          assignmentExpression
                                           conditionalExpression
                                            logicalOrExpression
                                             logicalAndExpression
                                              inclusiveOrExpression
                                               exclusiveOrExpression
                                                andExpression
                                                 equalityExpression
                                                  relationalExpression
                                                   shiftExpression
                                                    additiveExpression
                                                     multiplicativeExpression
                                                      castExpression
                                                       unaryExpression
                                                        postfixExpression
                                                         primaryExpression
                                                          id: x1
                                         operator: )
                         operator: )
         operator: ;
     operator: }
PASSED 1
======== CODE ========

void aX(void);
int a1(int param1);
int a2(int param1, param2);
void a3();
void a3(void);
void a4(int, ...);
void a4(int param1, ...);
int f(int arg1, char arg2)
{
    a1(arg1);
    a2(arg1, arg2);
    a3();
    a1(a1());
    a1(a1(), a2(a1(), x1));
}

compilationUnit
 translationUnit
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: void
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        id: aX
        operator: (
        parameterTypeList
         parameterList
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: void
        operator: )
    operator: ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: int
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        id: a1
        operator: (
        parameterTypeList
         parameterList
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: int
            declarationSpecifiers
             declarationSpecifier
              typeSpecifier
               typedefName
                id: param1
        operator: )
    operator: ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: int
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        id: a2
        operator: (
        parameterTypeList
         parameterList
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: int
            declarationSpecifiers
             declarationSpecifier
              typeSpecifier
               typedefName
                id: param1
          operator: ,
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              typedefName
               id: param2
        operator: )
    operator: ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: void
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        id: a3
        operator: (
        operator: )
    operator: ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: void
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        id: a3
        operator: (
        parameterTypeList
         parameterList
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: void
        operator: )
    operator: ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: void
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        id: a4
        operator: (
        parameterTypeList
         parameterList
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: int
         operator: ,
         operator: ...
        operator: )
    operator: ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: void
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        id: a4
        operator: (
        parameterTypeList
         parameterList
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: int
            declarationSpecifiers
             declarationSpecifier
              typeSpecifier
               typedefName
                id: param1
         operator: ,
         operator: ...
        operator: )
    operator: ;
  externalDeclaration
   functionDefinition
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: int
    declarator
     directDeclarator
      id: f
      operator: (
      parameterTypeList
       parameterList
        parameterDeclaration
         declarationSpecifiers2
          declarationSpecifier
           typeSpecifier
            keyword: int
          declarationSpecifiers
           declarationSpecifier
            typeSpecifier
             typedefName
              id: arg1
        operator: ,
        parameterDeclaration
         declarationSpecifiers2
          declarationSpecifier
           typeSpecifier
            keyword: char
          declarationSpecifiers
           declarationSpecifier
            typeSpecifier
             typedefName
              id: arg2
      operator: )
    compoundStatement
     operator: {
     blockItemList
      blockItem
       declaration
        declarationSpecifiers
         declarationSpecifier
          typeSpecifier
           typedefName
            id: a1
        initDeclaratorList
         initDeclarator
          declarator
           directDeclarator
            operator: (
            declarator
             directDeclarator
              id: arg1
            operator: )
        operator: ;
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          id: a2
                         operator: (
                         argumentExpressionList
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          id: arg1
                          operator: ,
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          id: arg2
                         operator: )
         operator: ;
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          id: a3
                         operator: (
                         operator: )
         operator: ;
      blockItem
       declaration
        declarationSpecifiers
         declarationSpecifier
          typeSpecifier
           typedefName
            id: a1
        initDeclaratorList
         initDeclarator
          declarator
           directDeclarator
            operator: (
            declarator
             directDeclarator
              id: a1
              operator: (
              operator: )
            operator: )
        operator: ;
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          id: a1
                         operator: (
                         argumentExpressionList
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          id: a1
                                         operator: (
                                         operator: )
                          operator: ,
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          id: a2
                                         operator: (
                                         argumentExpressionList
                                          assignmentExpression
                                           conditionalExpression
                                            logicalOrExpression
                                             logicalAndExpression
                                              inclusiveOrExpression
                                               exclusiveOrExpression
                                                andExpression
                                                 equalityExpression
                                                  relationalExpression
                                                   shiftExpression
                                                    additiveExpression
                                                     multiplicativeExpression
                                                      castExpression
                                                       unaryExpression
                                                        postfixExpression
                                                         primaryExpression
                                                          id: a1
                                                         operator: (
                                                         operator: )
                                          operator: ,
                                          assignmentExpression
                                           conditionalExpression
                                            logicalOrExpression
                                             logicalAndExpression
                                              inclusiveOrExpression
                                               exclusiveOrExpression
                                                andExpression
                                                 equalityExpression
                                                  relationalExpression
                                                   shiftExpression
                                                    additiveExpression
                                                     multiplicativeExpression
                                                      castExpression
                                                       unaryExpression
                                                        postfixExpression
                                                         primaryExpression
                                                          id: x1
                                         operator: )
                         operator: )
         operator: ;
     operator: }
PASSED 2
======== CODE ========

void aX(void);
int a1(int param1);
int a2(int param1, param2);
void a3();
void a3(void);
int f(int arg1, char arg2)
{
    a1(arg1);
    a2(arg1, arg2);
    a3();
}

compilationUnit
 translationUnit
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: void
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        id: aX
        operator: (
        parameterTypeList
         parameterList
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: void
        operator: )
    operator: ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: int
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        id: a1
        operator: (
        parameterTypeList
         parameterList
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: int
            declarationSpecifiers
             declarationSpecifier
              typeSpecifier
               typedefName
                id: param1
        operator: )
    operator: ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: int
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        id: a2
        operator: (
        parameterTypeList
         parameterList
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: int
            declarationSpecifiers
             declarationSpecifier
              typeSpecifier
               typedefName
                id: param1
          operator: ,
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              typedefName
               id: param2
        operator: )
    operator: ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: void
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        id: a3
        operator: (
        operator: )
    operator: ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: void
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        id: a3
        operator: (
        parameterTypeList
         parameterList
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: void
        operator: )
    operator: ;
  externalDeclaration
   functionDefinition
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: int
    declarator
     directDeclarator
      id: f
      operator: (
      parameterTypeList
       parameterList
        parameterDeclaration
         declarationSpecifiers2
          declarationSpecifier
           typeSpecifier
            keyword: int
          declarationSpecifiers
           declarationSpecifier
            typeSpecifier
             typedefName
              id: arg1
        operator: ,
        parameterDeclaration
         declarationSpecifiers2
          declarationSpecifier
           typeSpecifier
            keyword: char
          declarationSpecifiers
           declarationSpecifier
            typeSpecifier
             typedefName
              id: arg2
      operator: )
    compoundStatement
     operator: {
     blockItemList
      blockItem
       declaration
        declarationSpecifiers
         declarationSpecifier
          typeSpecifier
           typedefName
            id: a1
        initDeclaratorList
         initDeclarator
          declarator
           directDeclarator
            operator: (
            declarator
             directDeclarator
              id: arg1
            operator: )
        operator: ;
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          id: a2
                         operator: (
                         argumentExpressionList
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          id: arg1
                          operator: ,
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          id: arg2
                         operator: )
         operator: ;
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          id: a3
                         operator: (
                         operator: )
         operator: ;
     operator: }
PASSED 3
======== CODE ========

typedef
void *
(*f1)(
    const MyType    *param1,
    long             param2,
    void            *param3,
    short            param4
  );
typedef
int
(*f2)(
    const MyType    *param1,
    long             param2,
    char            *param3,
    int              param4
  );
typedef
MyStruct
( *f3 ) (
    const MyType    *param1,
    double           param2,
    float           *param3,
    long             param4
  );

compilationUnit
 translationUnit
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      storageClassSpecifier
       keyword: typedef
     declarationSpecifiers
      declarationSpecifier
       typeSpecifier
        keyword: void
        pointer
         operator: *
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        operator: (
        declarator
         pointer
          operator: *
         directDeclarator
          id: f1
        operator: )
        operator: (
        parameterTypeList
         parameterList
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeQualifier
              keyword: const
            declarationSpecifiers
             declarationSpecifier
              typeSpecifier
               typedefName
                id: MyType
               pointer
                operator: *
             declarationSpecifiers
              declarationSpecifier
               typeSpecifier
                typedefName
                 id: param1
          operator: ,
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: long
            declarationSpecifiers
             declarationSpecifier
              typeSpecifier
               typedefName
                id: param2
          operator: ,
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: void
              pointer
               operator: *
            declarationSpecifiers
             declarationSpecifier
              typeSpecifier
               typedefName
                id: param3
          operator: ,
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: short
            declarationSpecifiers
             declarationSpecifier
              typeSpecifier
               typedefName
                id: param4
        operator: )
    operator: ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      storageClassSpecifier
       keyword: typedef
     declarationSpecifiers
      declarationSpecifier
       typeSpecifier
        keyword: int
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        operator: (
        declarator
         pointer
          operator: *
         directDeclarator
          id: f2
        operator: )
        operator: (
        parameterTypeList
         parameterList
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeQualifier
              keyword: const
            declarationSpecifiers
             declarationSpecifier
              typeSpecifier
               typedefName
                id: MyType
               pointer
                operator: *
             declarationSpecifiers
              declarationSpecifier
               typeSpecifier
                typedefName
                 id: param1
          operator: ,
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: long
            declarationSpecifiers
             declarationSpecifier
              typeSpecifier
               typedefName
                id: param2
          operator: ,
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: char
              pointer
               operator: *
            declarationSpecifiers
             declarationSpecifier
              typeSpecifier
               typedefName
                id: param3
          operator: ,
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: int
            declarationSpecifiers
             declarationSpecifier
              typeSpecifier
               typedefName
                id: param4
        operator: )
    operator: ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      storageClassSpecifier
       keyword: typedef
     declarationSpecifiers
      declarationSpecifier
       typeSpecifier
        typedefName
         id: MyStruct
    initDeclaratorList
     initDeclarator
      declarator
       directDeclarator
        operator: (
        declarator
         pointer
          operator: *
         directDeclarator
          id: f3
        operator: )
        operator: (
        parameterTypeList
         parameterList
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeQualifier
              keyword: const
            declarationSpecifiers
             declarationSpecifier
              typeSpecifier
               typedefName
                id: MyType
               pointer
                operator: *
             declarationSpecifiers
              declarationSpecifier
               typeSpecifier
                typedefName
                 id: param1
          operator: ,
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: double
            declarationSpecifiers
             declarationSpecifier
              typeSpecifier
               typedefName
                id: param2
          operator: ,
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: float
              pointer
               operator: *
            declarationSpecifiers
             declarationSpecifier
              typeSpecifier
               typedefName
                id: param3
          operator: ,
          parameterDeclaration
           declarationSpecifiers2
            declarationSpecifier
             typeSpecifier
              keyword: long
            declarationSpecifiers
             declarationSpecifier
              typeSpecifier
               typedefName
                id: param4
        operator: )
    operator: ;
PASSED 4
======== CODE ========

int f(int arg1, char arg2)
{
    a1(arg1);
    a2(arg1, arg2);
    a3();
}

compilationUnit
 translationUnit
  externalDeclaration
   functionDefinition
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: int
    declarator
     directDeclarator
      id: f
      operator: (
      parameterTypeList
       parameterList
        parameterDeclaration
         declarationSpecifiers2
          declarationSpecifier
           typeSpecifier
            keyword: int
          declarationSpecifiers
           declarationSpecifier
            typeSpecifier
             typedefName
              id: arg1
        operator: ,
        parameterDeclaration
         declarationSpecifiers2
          declarationSpecifier
           typeSpecifier
            keyword: char
          declarationSpecifiers
           declarationSpecifier
            typeSpecifier
             typedefName
              id: arg2
      operator: )
    compoundStatement
     operator: {
     blockItemList
      blockItem
       declaration
        declarationSpecifiers
         declarationSpecifier
          typeSpecifier
           typedefName
            id: a1
        initDeclaratorList
         initDeclarator
          declarator
           directDeclarator
            operator: (
            declarator
             directDeclarator
              id: arg1
            operator: )
        operator: ;
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          id: a2
                         operator: (
                         argumentExpressionList
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          id: arg1
                          operator: ,
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          id: arg2
                         operator: )
         operator: ;
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          id: a3
                         operator: (
                         operator: )
         operator: ;
     operator: }
PASSED 5
======== CODE ========

f()
{
    a1 = (int)(b1);
    a2 = (CustomType)(b2);
    a3 = (CustomType *)(b3);
    a4 = (CustomType **)(b4);
    a5 = b5();
}

compilationUnit
 translationUnit
  externalDeclaration
   functionDefinition
    declarator
     directDeclarator
      id: f
      operator: (
      operator: )
    compoundStatement
     operator: {
     blockItemList
      blockItem
       statement
        labeledStatement
         id: a1
         operator: =
         statement
          expressionStatement
           expression
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         operator: (
                         typeName
                          specifierQualifierList
                           typeSpecifier
                            keyword: int
                         operator: )
                         castExpression
                          unaryExpression
                           postfixExpression
                            primaryExpression
                             operator: (
                             expression
                              assignmentExpression
                               conditionalExpression
                                logicalOrExpression
                                 logicalAndExpression
                                  inclusiveOrExpression
                                   exclusiveOrExpression
                                    andExpression
                                     equalityExpression
                                      relationalExpression
                                       shiftExpression
                                        additiveExpression
                                         multiplicativeExpression
                                          castExpression
                                           unaryExpression
                                            postfixExpression
                                             primaryExpression
                                              id: b1
                             operator: )
           operator: ;
      blockItem
       statement
        labeledStatement
         id: a2
         operator: =
         statement
          expressionStatement
           expression
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         operator: (
                         typeName
                          specifierQualifierList
                           typeSpecifier
                            typedefName
                             id: CustomType
                         operator: )
                         castExpression
                          unaryExpression
                           postfixExpression
                            primaryExpression
                             operator: (
                             expression
                              assignmentExpression
                               conditionalExpression
                                logicalOrExpression
                                 logicalAndExpression
                                  inclusiveOrExpression
                                   exclusiveOrExpression
                                    andExpression
                                     equalityExpression
                                      relationalExpression
                                       shiftExpression
                                        additiveExpression
                                         multiplicativeExpression
                                          castExpression
                                           unaryExpression
                                            postfixExpression
                                             primaryExpression
                                              id: b2
                             operator: )
           operator: ;
      blockItem
       statement
        labeledStatement
         id: a3
         operator: =
         statement
          expressionStatement
           expression
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         operator: (
                         typeName
                          specifierQualifierList
                           typeSpecifier
                            typedefName
                             id: CustomType
                            pointer
                             operator: *
                         operator: )
                         castExpression
                          unaryExpression
                           postfixExpression
                            primaryExpression
                             operator: (
                             expression
                              assignmentExpression
                               conditionalExpression
                                logicalOrExpression
                                 logicalAndExpression
                                  inclusiveOrExpression
                                   exclusiveOrExpression
                                    andExpression
                                     equalityExpression
                                      relationalExpression
                                       shiftExpression
                                        additiveExpression
                                         multiplicativeExpression
                                          castExpression
                                           unaryExpression
                                            postfixExpression
                                             primaryExpression
                                              id: b3
                             operator: )
           operator: ;
      blockItem
       statement
        labeledStatement
         id: a4
         operator: =
         statement
          expressionStatement
           expression
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         operator: (
                         typeName
                          specifierQualifierList
                           typeSpecifier
                            typedefName
                             id: CustomType
                            pointer
                             operator: *
                             operator: *
                         operator: )
                         castExpression
                          unaryExpression
                           postfixExpression
                            primaryExpression
                             operator: (
                             expression
                              assignmentExpression
                               conditionalExpression
                                logicalOrExpression
                                 logicalAndExpression
                                  inclusiveOrExpression
                                   exclusiveOrExpression
                                    andExpression
                                     equalityExpression
                                      relationalExpression
                                       shiftExpression
                                        additiveExpression
                                         multiplicativeExpression
                                          castExpression
                                           unaryExpression
                                            postfixExpression
                                             primaryExpression
                                              id: b4
                             operator: )
           operator: ;
      blockItem
       statement
        labeledStatement
         id: a5
         operator: =
         statement
          expressionStatement
           expression
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            id: b5
                           operator: (
                           operator: )
           operator: ;
     operator: }
PASSED 6
======== CODE ========

int main()
{
    int i, sum = 0;
    for ( i = 1; i <= LAST; i++ ) {
      sum += i;
    } /*-for-*/
    printf("sum = %d\n", sum);
    return 0;
}

compilationUnit
 translationUnit
  externalDeclaration
   functionDefinition
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: int
    declarator
     directDeclarator
      id: main
      operator: (
      operator: )
    compoundStatement
     operator: {
     blockItemList
      blockItem
       declaration
        declarationSpecifiers
         declarationSpecifier
          typeSpecifier
           keyword: int
        initDeclaratorList
         initDeclarator
          declarator
           directDeclarator
            id: i
         operator: ,
         initDeclarator
          declarator
           directDeclarator
            id: sum
          operator: =
          initializer
           assignmentExpression
            conditionalExpression
             logicalOrExpression
              logicalAndExpression
               inclusiveOrExpression
                exclusiveOrExpression
                 andExpression
                  equalityExpression
                   relationalExpression
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           constant
                            int: 0
        operator: ;
      blockItem
       statement
        iterationStatement
         keyword: for
         operator: (
         forCondition
          expression
           assignmentExpression
            unaryExpression
             postfixExpression
              primaryExpression
               id: i
            assignmentOperator
             operator: =
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            constant
                             int: 1
          operator: ;
          forExpression
           assignmentExpression
            conditionalExpression
             logicalOrExpression
              logicalAndExpression
               inclusiveOrExpression
                exclusiveOrExpression
                 andExpression
                  equalityExpression
                   relationalExpression
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           id: i
                    operator: <=
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           id: LAST
          operator: ;
          forExpression
           assignmentExpression
            conditionalExpression
             logicalOrExpression
              logicalAndExpression
               inclusiveOrExpression
                exclusiveOrExpression
                 andExpression
                  equalityExpression
                   relationalExpression
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           id: i
                          operator: ++
         operator: )
         statement
          compoundStatement
           operator: {
           blockItemList
            blockItem
             statement
              expressionStatement
               expression
                assignmentExpression
                 unaryExpression
                  postfixExpression
                   primaryExpression
                    id: sum
                 assignmentOperator
                  operator: +=
                 assignmentExpression
                  conditionalExpression
                   logicalOrExpression
                    logicalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             castExpression
                              unaryExpression
                               postfixExpression
                                primaryExpression
                                 id: i
               operator: ;
           operator: }
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          id: printf
                         operator: (
                         argumentExpressionList
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          string: "sum = %d\n"
                          operator: ,
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          id: sum
                         operator: )
         operator: ;
      blockItem
       statement
        jumpStatement
         keyword: return
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          constant
                           int: 0
         operator: ;
     operator: }
PASSED 7
======== CODE ========

struct tree_el {
   int val;
   struct tree_el * right, * left;
};

typedef struct tree_el node;

void insert(node ** tree, node * item) {
   if(!(*tree)) {
      *tree = item;
      return;
   }
   if(item->val<(*tree)->val)
      insert(&(*tree)->left, item);
   else if(item->val>(*tree)->val)
      insert(&(*tree)->right, item);
}

void printout(node * tree) {
   if(tree->left) printout(tree->left);
   printf("%d\n",tree->val);
   if(tree->right) printout(tree->right);
}

void main() {
   node * curr, * root;
   int i;

   root = NULL;

   for(i=1;i<=10;i++) {
      curr = (node *)malloc(sizeof(node));
      curr->left = curr->right = NULL;
      curr->val = rand();
      insert(&root, curr);
   }

   printout(root);
}

compilationUnit
 translationUnit
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       structOrUnionSpecifier
        structOrUnion
         keyword: struct
        id: tree_el
        operator: {
        structDeclarationList
         structDeclaration
          specifierQualifierList
           typeSpecifier
            keyword: int
           specifierQualifierList
            typeSpecifier
             typedefName
              id: val
          operator: ;
         structDeclaration
          specifierQualifierList
           typeSpecifier
            structOrUnionSpecifier
             structOrUnion
              keyword: struct
             id: tree_el
            pointer
             operator: *
          structDeclaratorList
           structDeclarator
            declarator
             directDeclarator
              id: right
           operator: ,
           structDeclarator
            declarator
             pointer
              operator: *
             directDeclarator
              id: left
          operator: ;
        operator: }
    operator: ;
  externalDeclaration
   declaration
    declarationSpecifiers
     declarationSpecifier
      storageClassSpecifier
       keyword: typedef
     declarationSpecifiers
      declarationSpecifier
       typeSpecifier
        structOrUnionSpecifier
         structOrUnion
          keyword: struct
         id: tree_el
      declarationSpecifiers
       declarationSpecifier
        typeSpecifier
         typedefName
          id: node
    operator: ;
  externalDeclaration
   functionDefinition
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: void
    declarator
     directDeclarator
      id: insert
      operator: (
      parameterTypeList
       parameterList
        parameterDeclaration
         declarationSpecifiers2
          declarationSpecifier
           typeSpecifier
            typedefName
             id: node
            pointer
             operator: *
             operator: *
          declarationSpecifiers
           declarationSpecifier
            typeSpecifier
             typedefName
              id: tree
        operator: ,
        parameterDeclaration
         declarationSpecifiers2
          declarationSpecifier
           typeSpecifier
            typedefName
             id: node
            pointer
             operator: *
          declarationSpecifiers
           declarationSpecifier
            typeSpecifier
             typedefName
              id: item
      operator: )
    compoundStatement
     operator: {
     blockItemList
      blockItem
       statement
        selectionStatement
         keyword: if
         operator: (
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        unaryOperator
                         operator: !
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            operator: (
                            expression
                             assignmentExpression
                              conditionalExpression
                               logicalOrExpression
                                logicalAndExpression
                                 inclusiveOrExpression
                                  exclusiveOrExpression
                                   andExpression
                                    equalityExpression
                                     relationalExpression
                                      shiftExpression
                                       additiveExpression
                                        multiplicativeExpression
                                         castExpression
                                          unaryExpression
                                           unaryOperator
                                            operator: *
                                           castExpression
                                            unaryExpression
                                             postfixExpression
                                              primaryExpression
                                               id: tree
                            operator: )
         operator: )
         statement
          compoundStatement
           operator: {
           blockItemList
            blockItem
             statement
              expressionStatement
               expression
                assignmentExpression
                 unaryExpression
                  unaryOperator
                   operator: *
                  castExpression
                   unaryExpression
                    postfixExpression
                     primaryExpression
                      id: tree
                 assignmentOperator
                  operator: =
                 assignmentExpression
                  conditionalExpression
                   logicalOrExpression
                    logicalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             castExpression
                              unaryExpression
                               postfixExpression
                                primaryExpression
                                 id: item
               operator: ;
            blockItem
             statement
              jumpStatement
               keyword: return
               operator: ;
           operator: }
      blockItem
       statement
        selectionStatement
         keyword: if
         operator: (
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          id: item
                         operator: ->
                         id: val
                   operator: <
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          operator: (
                          expression
                           assignmentExpression
                            conditionalExpression
                             logicalOrExpression
                              logicalAndExpression
                               inclusiveOrExpression
                                exclusiveOrExpression
                                 andExpression
                                  equalityExpression
                                   relationalExpression
                                    shiftExpression
                                     additiveExpression
                                      multiplicativeExpression
                                       castExpression
                                        unaryExpression
                                         unaryOperator
                                          operator: *
                                         castExpression
                                          unaryExpression
                                           postfixExpression
                                            primaryExpression
                                             id: tree
                          operator: )
                         operator: ->
                         id: val
         operator: )
         statement
          expressionStatement
           expression
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            id: insert
                           operator: (
                           argumentExpressionList
                            assignmentExpression
                             conditionalExpression
                              logicalOrExpression
                               logicalAndExpression
                                inclusiveOrExpression
                                 exclusiveOrExpression
                                  andExpression
                                   equalityExpression
                                    relationalExpression
                                     shiftExpression
                                      additiveExpression
                                       multiplicativeExpression
                                        castExpression
                                         unaryExpression
                                          unaryOperator
                                           operator: &
                                          castExpression
                                           unaryExpression
                                            postfixExpression
                                             primaryExpression
                                              operator: (
                                              expression
                                               assignmentExpression
                                                conditionalExpression
                                                 logicalOrExpression
                                                  logicalAndExpression
                                                   inclusiveOrExpression
                                                    exclusiveOrExpression
                                                     andExpression
                                                      equalityExpression
                                                       relationalExpression
                                                        shiftExpression
                                                         additiveExpression
                                                          multiplicativeExpression
                                                           castExpression
                                                            unaryExpression
                                                             unaryOperator
                                                              operator: *
                                                             castExpression
                                                              unaryExpression
                                                               postfixExpression
                                                                primaryExpression
                                                                 id: tree
                                              operator: )
                                             operator: ->
                                             id: left
                            operator: ,
                            assignmentExpression
                             conditionalExpression
                              logicalOrExpression
                               logicalAndExpression
                                inclusiveOrExpression
                                 exclusiveOrExpression
                                  andExpression
                                   equalityExpression
                                    relationalExpression
                                     shiftExpression
                                      additiveExpression
                                       multiplicativeExpression
                                        castExpression
                                         unaryExpression
                                          postfixExpression
                                           primaryExpression
                                            id: item
                           operator: )
           operator: ;
         keyword: else
         statement
          selectionStatement
           keyword: if
           operator: (
           expression
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            id: item
                           operator: ->
                           id: val
                     operator: >
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            operator: (
                            expression
                             assignmentExpression
                              conditionalExpression
                               logicalOrExpression
                                logicalAndExpression
                                 inclusiveOrExpression
                                  exclusiveOrExpression
                                   andExpression
                                    equalityExpression
                                     relationalExpression
                                      shiftExpression
                                       additiveExpression
                                        multiplicativeExpression
                                         castExpression
                                          unaryExpression
                                           unaryOperator
                                            operator: *
                                           castExpression
                                            unaryExpression
                                             postfixExpression
                                              primaryExpression
                                               id: tree
                            operator: )
                           operator: ->
                           id: val
           operator: )
           statement
            expressionStatement
             expression
              assignmentExpression
               conditionalExpression
                logicalOrExpression
                 logicalAndExpression
                  inclusiveOrExpression
                   exclusiveOrExpression
                    andExpression
                     equalityExpression
                      relationalExpression
                       shiftExpression
                        additiveExpression
                         multiplicativeExpression
                          castExpression
                           unaryExpression
                            postfixExpression
                             primaryExpression
                              id: insert
                             operator: (
                             argumentExpressionList
                              assignmentExpression
                               conditionalExpression
                                logicalOrExpression
                                 logicalAndExpression
                                  inclusiveOrExpression
                                   exclusiveOrExpression
                                    andExpression
                                     equalityExpression
                                      relationalExpression
                                       shiftExpression
                                        additiveExpression
                                         multiplicativeExpression
                                          castExpression
                                           unaryExpression
                                            unaryOperator
                                             operator: &
                                            castExpression
                                             unaryExpression
                                              postfixExpression
                                               primaryExpression
                                                operator: (
                                                expression
                                                 assignmentExpression
                                                  conditionalExpression
                                                   logicalOrExpression
                                                    logicalAndExpression
                                                     inclusiveOrExpression
                                                      exclusiveOrExpression
                                                       andExpression
                                                        equalityExpression
                                                         relationalExpression
                                                          shiftExpression
                                                           additiveExpression
                                                            multiplicativeExpression
                                                             castExpression
                                                              unaryExpression
                                                               unaryOperator
                                                                operator: *
                                                               castExpression
                                                                unaryExpression
                                                                 postfixExpression
                                                                  primaryExpression
                                                                   id: tree
                                                operator: )
                                               operator: ->
                                               id: right
                              operator: ,
                              assignmentExpression
                               conditionalExpression
                                logicalOrExpression
                                 logicalAndExpression
                                  inclusiveOrExpression
                                   exclusiveOrExpression
                                    andExpression
                                     equalityExpression
                                      relationalExpression
                                       shiftExpression
                                        additiveExpression
                                         multiplicativeExpression
                                          castExpression
                                           unaryExpression
                                            postfixExpression
                                             primaryExpression
                                              id: item
                             operator: )
             operator: ;
     operator: }
  externalDeclaration
   functionDefinition
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: void
    declarator
     directDeclarator
      id: printout
      operator: (
      parameterTypeList
       parameterList
        parameterDeclaration
         declarationSpecifiers2
          declarationSpecifier
           typeSpecifier
            typedefName
             id: node
            pointer
             operator: *
          declarationSpecifiers
           declarationSpecifier
            typeSpecifier
             typedefName
              id: tree
      operator: )
    compoundStatement
     operator: {
     blockItemList
      blockItem
       statement
        selectionStatement
         keyword: if
         operator: (
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          id: tree
                         operator: ->
                         id: left
         operator: )
         statement
          expressionStatement
           expression
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            id: printout
                           operator: (
                           argumentExpressionList
                            assignmentExpression
                             conditionalExpression
                              logicalOrExpression
                               logicalAndExpression
                                inclusiveOrExpression
                                 exclusiveOrExpression
                                  andExpression
                                   equalityExpression
                                    relationalExpression
                                     shiftExpression
                                      additiveExpression
                                       multiplicativeExpression
                                        castExpression
                                         unaryExpression
                                          postfixExpression
                                           primaryExpression
                                            id: tree
                                           operator: ->
                                           id: left
                           operator: )
           operator: ;
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          id: printf
                         operator: (
                         argumentExpressionList
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          string: "%d\n"
                          operator: ,
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          id: tree
                                         operator: ->
                                         id: val
                         operator: )
         operator: ;
      blockItem
       statement
        selectionStatement
         keyword: if
         operator: (
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          id: tree
                         operator: ->
                         id: right
         operator: )
         statement
          expressionStatement
           expression
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            id: printout
                           operator: (
                           argumentExpressionList
                            assignmentExpression
                             conditionalExpression
                              logicalOrExpression
                               logicalAndExpression
                                inclusiveOrExpression
                                 exclusiveOrExpression
                                  andExpression
                                   equalityExpression
                                    relationalExpression
                                     shiftExpression
                                      additiveExpression
                                       multiplicativeExpression
                                        castExpression
                                         unaryExpression
                                          postfixExpression
                                           primaryExpression
                                            id: tree
                                           operator: ->
                                           id: right
                           operator: )
           operator: ;
     operator: }
  externalDeclaration
   functionDefinition
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: void
    declarator
     directDeclarator
      id: main
      operator: (
      operator: )
    compoundStatement
     operator: {
     blockItemList
      blockItem
       declaration
        declarationSpecifiers
         declarationSpecifier
          typeSpecifier
           typedefName
            id: node
           pointer
            operator: *
        initDeclaratorList
         initDeclarator
          declarator
           directDeclarator
            id: curr
         operator: ,
         initDeclarator
          declarator
           pointer
            operator: *
           directDeclarator
            id: root
        operator: ;
      blockItem
       declaration
        declarationSpecifiers
         declarationSpecifier
          typeSpecifier
           keyword: int
         declarationSpecifiers
          declarationSpecifier
           typeSpecifier
            typedefName
             id: i
        operator: ;
      blockItem
       statement
        labeledStatement
         id: root
         operator: =
         statement
          expressionStatement
           expression
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            id: NULL
           operator: ;
      blockItem
       statement
        iterationStatement
         keyword: for
         operator: (
         forCondition
          expression
           assignmentExpression
            unaryExpression
             postfixExpression
              primaryExpression
               id: i
            assignmentOperator
             operator: =
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            constant
                             int: 1
          operator: ;
          forExpression
           assignmentExpression
            conditionalExpression
             logicalOrExpression
              logicalAndExpression
               inclusiveOrExpression
                exclusiveOrExpression
                 andExpression
                  equalityExpression
                   relationalExpression
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           id: i
                    operator: <=
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           constant
                            int: 10
          operator: ;
          forExpression
           assignmentExpression
            conditionalExpression
             logicalOrExpression
              logicalAndExpression
               inclusiveOrExpression
                exclusiveOrExpression
                 andExpression
                  equalityExpression
                   relationalExpression
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           id: i
                          operator: ++
         operator: )
         statement
          compoundStatement
           operator: {
           blockItemList
            blockItem
             statement
              labeledStatement
               id: curr
               operator: =
               statement
                expressionStatement
                 expression
                  assignmentExpression
                   conditionalExpression
                    logicalOrExpression
                     logicalAndExpression
                      inclusiveOrExpression
                       exclusiveOrExpression
                        andExpression
                         equalityExpression
                          relationalExpression
                           shiftExpression
                            additiveExpression
                             multiplicativeExpression
                              castExpression
                               operator: (
                               typeName
                                specifierQualifierList
                                 typeSpecifier
                                  typedefName
                                   id: node
                                  pointer
                                   operator: *
                               operator: )
                               castExpression
                                unaryExpression
                                 postfixExpression
                                  primaryExpression
                                   id: malloc
                                  operator: (
                                  argumentExpressionList
                                   assignmentExpression
                                    conditionalExpression
                                     logicalOrExpression
                                      logicalAndExpression
                                       inclusiveOrExpression
                                        exclusiveOrExpression
                                         andExpression
                                          equalityExpression
                                           relationalExpression
                                            shiftExpression
                                             additiveExpression
                                              multiplicativeExpression
                                               castExpression
                                                unaryExpression
                                                 keyword: sizeof
                                                 operator: (
                                                 typeName
                                                  specifierQualifierList
                                                   typeSpecifier
                                                    typedefName
                                                     id: node
                                                 operator: )
                                  operator: )
                 operator: ;
            blockItem
             statement
              expressionStatement
               expression
                assignmentExpression
                 unaryExpression
                  postfixExpression
                   primaryExpression
                    id: curr
                   operator: ->
                   id: left
                 assignmentOperator
                  operator: =
                 assignmentExpression
                  unaryExpression
                   postfixExpression
                    primaryExpression
                     id: curr
                    operator: ->
                    id: right
                  assignmentOperator
                   operator: =
                  assignmentExpression
                   conditionalExpression
                    logicalOrExpression
                     logicalAndExpression
                      inclusiveOrExpression
                       exclusiveOrExpression
                        andExpression
                         equalityExpression
                          relationalExpression
                           shiftExpression
                            additiveExpression
                             multiplicativeExpression
                              castExpression
                               unaryExpression
                                postfixExpression
                                 primaryExpression
                                  id: NULL
               operator: ;
            blockItem
             statement
              expressionStatement
               expression
                assignmentExpression
                 unaryExpression
                  postfixExpression
                   primaryExpression
                    id: curr
                   operator: ->
                   id: val
                 assignmentOperator
                  operator: =
                 assignmentExpression
                  conditionalExpression
                   logicalOrExpression
                    logicalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             castExpression
                              unaryExpression
                               postfixExpression
                                primaryExpression
                                 id: rand
                                operator: (
                                operator: )
               operator: ;
            blockItem
             statement
              expressionStatement
               expression
                assignmentExpression
                 conditionalExpression
                  logicalOrExpression
                   logicalAndExpression
                    inclusiveOrExpression
                     exclusiveOrExpression
                      andExpression
                       equalityExpression
                        relationalExpression
                         shiftExpression
                          additiveExpression
                           multiplicativeExpression
                            castExpression
                             unaryExpression
                              postfixExpression
                               primaryExpression
                                id: insert
                               operator: (
                               argumentExpressionList
                                assignmentExpression
                                 conditionalExpression
                                  logicalOrExpression
                                   logicalAndExpression
                                    inclusiveOrExpression
                                     exclusiveOrExpression
                                      andExpression
                                       equalityExpression
                                        relationalExpression
                                         shiftExpression
                                          additiveExpression
                                           multiplicativeExpression
                                            castExpression
                                             unaryExpression
                                              unaryOperator
                                               operator: &
                                              castExpression
                                               unaryExpression
                                                postfixExpression
                                                 primaryExpression
                                                  id: root
                                operator: ,
                                assignmentExpression
                                 conditionalExpression
                                  logicalOrExpression
                                   logicalAndExpression
                                    inclusiveOrExpression
                                     exclusiveOrExpression
                                      andExpression
                                       equalityExpression
                                        relationalExpression
                                         shiftExpression
                                          additiveExpression
                                           multiplicativeExpression
                                            castExpression
                                             unaryExpression
                                              postfixExpression
                                               primaryExpression
                                                id: curr
                               operator: )
               operator: ;
           operator: }
      blockItem
       declaration
        declarationSpecifiers
         declarationSpecifier
          typeSpecifier
           typedefName
            id: printout
        initDeclaratorList
         initDeclarator
          declarator
           directDeclarator
            operator: (
            declarator
             directDeclarator
              id: root
            operator: )
        operator: ;
     operator: }
PASSED 8
======== CODE ========

float f(float x)
{
    return(1/(1+pow(x,2)));
}
void main()
{
    int i,n;
    float x0,xn,h,y[20],so,se,ans,x[20];
    printf("\n Enter values of x0,xn,h:\n");
    scanf("%f%f%f",&x0,&xn,&h);
    n=(xn-x0)/h;
    if(n%2==1)
    {
        n=n+1;
    }
    h=(xn-x0)/n;
    printf("\nrefined value of n and h are:%d  %f\n",n,h);
    printf("\n Y values \n");
    for(i=0; i<=n; i++)
    {
        x[i]=x0+i*h;
        y[i]=f(x[i]);
        printf("\n%f\n",y[i]);
    }
    so=0;
    se=0;
    for(i=1; i<n; i++)
    {
        if(i%2==1)
        {
            so=so+y[i];
        }
        else
        {
            se=se+y[i];
        }
    }
    ans=h/3*(y[0]+y[n]+4*so+2*se);
    printf("\nfinal integration is %f",ans);
    getch();
}

compilationUnit
 translationUnit
  externalDeclaration
   functionDefinition
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: float
    declarator
     directDeclarator
      id: f
      operator: (
      parameterTypeList
       parameterList
        parameterDeclaration
         declarationSpecifiers2
          declarationSpecifier
           typeSpecifier
            keyword: float
          declarationSpecifiers
           declarationSpecifier
            typeSpecifier
             typedefName
              id: x
      operator: )
    compoundStatement
     operator: {
     blockItemList
      blockItem
       statement
        jumpStatement
         keyword: return
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          operator: (
                          expression
                           assignmentExpression
                            conditionalExpression
                             logicalOrExpression
                              logicalAndExpression
                               inclusiveOrExpression
                                exclusiveOrExpression
                                 andExpression
                                  equalityExpression
                                   relationalExpression
                                    shiftExpression
                                     additiveExpression
                                      multiplicativeExpression
                                       castExpression
                                        unaryExpression
                                         postfixExpression
                                          primaryExpression
                                           constant
                                            int: 1
                                       operator: /
                                       castExpression
                                        unaryExpression
                                         postfixExpression
                                          primaryExpression
                                           operator: (
                                           expression
                                            assignmentExpression
                                             conditionalExpression
                                              logicalOrExpression
                                               logicalAndExpression
                                                inclusiveOrExpression
                                                 exclusiveOrExpression
                                                  andExpression
                                                   equalityExpression
                                                    relationalExpression
                                                     shiftExpression
                                                      additiveExpression
                                                       multiplicativeExpression
                                                        castExpression
                                                         unaryExpression
                                                          postfixExpression
                                                           primaryExpression
                                                            constant
                                                             int: 1
                                                       operator: +
                                                       multiplicativeExpression
                                                        castExpression
                                                         unaryExpression
                                                          postfixExpression
                                                           primaryExpression
                                                            id: pow
                                                           operator: (
                                                           argumentExpressionList
                                                            assignmentExpression
                                                             conditionalExpression
                                                              logicalOrExpression
                                                               logicalAndExpression
                                                                inclusiveOrExpression
                                                                 exclusiveOrExpression
                                                                  andExpression
                                                                   equalityExpression
                                                                    relationalExpression
                                                                     shiftExpression
                                                                      additiveExpression
                                                                       multiplicativeExpression
                                                                        castExpression
                                                                         unaryExpression
                                                                          postfixExpression
                                                                           primaryExpression
                                                                            id: x
                                                            operator: ,
                                                            assignmentExpression
                                                             conditionalExpression
                                                              logicalOrExpression
                                                               logicalAndExpression
                                                                inclusiveOrExpression
                                                                 exclusiveOrExpression
                                                                  andExpression
                                                                   equalityExpression
                                                                    relationalExpression
                                                                     shiftExpression
                                                                      additiveExpression
                                                                       multiplicativeExpression
                                                                        castExpression
                                                                         unaryExpression
                                                                          postfixExpression
                                                                           primaryExpression
                                                                            constant
                                                                             int: 2
                                                           operator: )
                                           operator: )
                          operator: )
         operator: ;
     operator: }
  externalDeclaration
   functionDefinition
    declarationSpecifiers
     declarationSpecifier
      typeSpecifier
       keyword: void
    declarator
     directDeclarator
      id: main
      operator: (
      operator: )
    compoundStatement
     operator: {
     blockItemList
      blockItem
       declaration
        declarationSpecifiers
         declarationSpecifier
          typeSpecifier
           keyword: int
        initDeclaratorList
         initDeclarator
          declarator
           directDeclarator
            id: i
         operator: ,
         initDeclarator
          declarator
           directDeclarator
            id: n
        operator: ;
      blockItem
       declaration
        declarationSpecifiers
         declarationSpecifier
          typeSpecifier
           keyword: float
        initDeclaratorList
         initDeclarator
          declarator
           directDeclarator
            id: x0
         operator: ,
         initDeclarator
          declarator
           directDeclarator
            id: xn
         operator: ,
         initDeclarator
          declarator
           directDeclarator
            id: h
         operator: ,
         initDeclarator
          declarator
           directDeclarator
            id: y
            operator: [
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            constant
                             int: 20
            operator: ]
         operator: ,
         initDeclarator
          declarator
           directDeclarator
            id: so
         operator: ,
         initDeclarator
          declarator
           directDeclarator
            id: se
         operator: ,
         initDeclarator
          declarator
           directDeclarator
            id: ans
         operator: ,
         initDeclarator
          declarator
           directDeclarator
            id: x
            operator: [
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            constant
                             int: 20
            operator: ]
        operator: ;
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          id: printf
                         operator: (
                         argumentExpressionList
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          string: "\n Enter values of x0,xn,h:\n"
                         operator: )
         operator: ;
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          id: scanf
                         operator: (
                         argumentExpressionList
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          string: "%f%f%f"
                          operator: ,
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        unaryOperator
                                         operator: &
                                        castExpression
                                         unaryExpression
                                          postfixExpression
                                           primaryExpression
                                            id: x0
                          operator: ,
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        unaryOperator
                                         operator: &
                                        castExpression
                                         unaryExpression
                                          postfixExpression
                                           primaryExpression
                                            id: xn
                          operator: ,
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        unaryOperator
                                         operator: &
                                        castExpression
                                         unaryExpression
                                          postfixExpression
                                           primaryExpression
                                            id: h
                         operator: )
         operator: ;
      blockItem
       statement
        labeledStatement
         id: n
         operator: =
         statement
          expressionStatement
           expression
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            operator: (
                            expression
                             assignmentExpression
                              conditionalExpression
                               logicalOrExpression
                                logicalAndExpression
                                 inclusiveOrExpression
                                  exclusiveOrExpression
                                   andExpression
                                    equalityExpression
                                     relationalExpression
                                      shiftExpression
                                       additiveExpression
                                        multiplicativeExpression
                                         castExpression
                                          unaryExpression
                                           postfixExpression
                                            primaryExpression
                                             id: xn
                                        operator: -
                                        multiplicativeExpression
                                         castExpression
                                          unaryExpression
                                           postfixExpression
                                            primaryExpression
                                             id: x0
                            operator: )
                        operator: /
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            id: h
           operator: ;
      blockItem
       statement
        selectionStatement
         keyword: if
         operator: (
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          id: n
                      operator: %
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          constant
                           int: 2
                  operator: ==
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          constant
                           int: 1
         operator: )
         statement
          compoundStatement
           operator: {
           blockItemList
            blockItem
             statement
              labeledStatement
               id: n
               operator: =
               statement
                expressionStatement
                 expression
                  assignmentExpression
                   conditionalExpression
                    logicalOrExpression
                     logicalAndExpression
                      inclusiveOrExpression
                       exclusiveOrExpression
                        andExpression
                         equalityExpression
                          relationalExpression
                           shiftExpression
                            additiveExpression
                             multiplicativeExpression
                              castExpression
                               unaryExpression
                                postfixExpression
                                 primaryExpression
                                  id: n
                             operator: +
                             multiplicativeExpression
                              castExpression
                               unaryExpression
                                postfixExpression
                                 primaryExpression
                                  constant
                                   int: 1
                 operator: ;
           operator: }
      blockItem
       statement
        labeledStatement
         id: h
         operator: =
         statement
          expressionStatement
           expression
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            operator: (
                            expression
                             assignmentExpression
                              conditionalExpression
                               logicalOrExpression
                                logicalAndExpression
                                 inclusiveOrExpression
                                  exclusiveOrExpression
                                   andExpression
                                    equalityExpression
                                     relationalExpression
                                      shiftExpression
                                       additiveExpression
                                        multiplicativeExpression
                                         castExpression
                                          unaryExpression
                                           postfixExpression
                                            primaryExpression
                                             id: xn
                                        operator: -
                                        multiplicativeExpression
                                         castExpression
                                          unaryExpression
                                           postfixExpression
                                            primaryExpression
                                             id: x0
                            operator: )
                        operator: /
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            id: n
           operator: ;
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          id: printf
                         operator: (
                         argumentExpressionList
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          string: "\nrefined value of n and h are:%d  %f\n"
                          operator: ,
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          id: n
                          operator: ,
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          id: h
                         operator: )
         operator: ;
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          id: printf
                         operator: (
                         argumentExpressionList
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          string: "\n Y values \n"
                         operator: )
         operator: ;
      blockItem
       statement
        iterationStatement
         keyword: for
         operator: (
         forCondition
          expression
           assignmentExpression
            unaryExpression
             postfixExpression
              primaryExpression
               id: i
            assignmentOperator
             operator: =
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            constant
                             int: 0
          operator: ;
          forExpression
           assignmentExpression
            conditionalExpression
             logicalOrExpression
              logicalAndExpression
               inclusiveOrExpression
                exclusiveOrExpression
                 andExpression
                  equalityExpression
                   relationalExpression
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           id: i
                    operator: <=
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           id: n
          operator: ;
          forExpression
           assignmentExpression
            conditionalExpression
             logicalOrExpression
              logicalAndExpression
               inclusiveOrExpression
                exclusiveOrExpression
                 andExpression
                  equalityExpression
                   relationalExpression
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           id: i
                          operator: ++
         operator: )
         statement
          compoundStatement
           operator: {
           blockItemList
            blockItem
             statement
              expressionStatement
               expression
                assignmentExpression
                 unaryExpression
                  postfixExpression
                   primaryExpression
                    id: x
                   operator: [
                   expression
                    assignmentExpression
                     conditionalExpression
                      logicalOrExpression
                       logicalAndExpression
                        inclusiveOrExpression
                         exclusiveOrExpression
                          andExpression
                           equalityExpression
                            relationalExpression
                             shiftExpression
                              additiveExpression
                               multiplicativeExpression
                                castExpression
                                 unaryExpression
                                  postfixExpression
                                   primaryExpression
                                    id: i
                   operator: ]
                 assignmentOperator
                  operator: =
                 assignmentExpression
                  conditionalExpression
                   logicalOrExpression
                    logicalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             castExpression
                              unaryExpression
                               postfixExpression
                                primaryExpression
                                 id: x0
                            operator: +
                            multiplicativeExpression
                             castExpression
                              unaryExpression
                               postfixExpression
                                primaryExpression
                                 id: i
                             operator: *
                             castExpression
                              unaryExpression
                               postfixExpression
                                primaryExpression
                                 id: h
               operator: ;
            blockItem
             statement
              expressionStatement
               expression
                assignmentExpression
                 unaryExpression
                  postfixExpression
                   primaryExpression
                    id: y
                   operator: [
                   expression
                    assignmentExpression
                     conditionalExpression
                      logicalOrExpression
                       logicalAndExpression
                        inclusiveOrExpression
                         exclusiveOrExpression
                          andExpression
                           equalityExpression
                            relationalExpression
                             shiftExpression
                              additiveExpression
                               multiplicativeExpression
                                castExpression
                                 unaryExpression
                                  postfixExpression
                                   primaryExpression
                                    id: i
                   operator: ]
                 assignmentOperator
                  operator: =
                 assignmentExpression
                  conditionalExpression
                   logicalOrExpression
                    logicalAndExpression
                     inclusiveOrExpression
                      exclusiveOrExpression
                       andExpression
                        equalityExpression
                         relationalExpression
                          shiftExpression
                           additiveExpression
                            multiplicativeExpression
                             castExpression
                              unaryExpression
                               postfixExpression
                                primaryExpression
                                 id: f
                                operator: (
                                argumentExpressionList
                                 assignmentExpression
                                  conditionalExpression
                                   logicalOrExpression
                                    logicalAndExpression
                                     inclusiveOrExpression
                                      exclusiveOrExpression
                                       andExpression
                                        equalityExpression
                                         relationalExpression
                                          shiftExpression
                                           additiveExpression
                                            multiplicativeExpression
                                             castExpression
                                              unaryExpression
                                               postfixExpression
                                                primaryExpression
                                                 id: x
                                                operator: [
                                                expression
                                                 assignmentExpression
                                                  conditionalExpression
                                                   logicalOrExpression
                                                    logicalAndExpression
                                                     inclusiveOrExpression
                                                      exclusiveOrExpression
                                                       andExpression
                                                        equalityExpression
                                                         relationalExpression
                                                          shiftExpression
                                                           additiveExpression
                                                            multiplicativeExpression
                                                             castExpression
                                                              unaryExpression
                                                               postfixExpression
                                                                primaryExpression
                                                                 id: i
                                                operator: ]
                                operator: )
               operator: ;
            blockItem
             statement
              expressionStatement
               expression
                assignmentExpression
                 conditionalExpression
                  logicalOrExpression
                   logicalAndExpression
                    inclusiveOrExpression
                     exclusiveOrExpression
                      andExpression
                       equalityExpression
                        relationalExpression
                         shiftExpression
                          additiveExpression
                           multiplicativeExpression
                            castExpression
                             unaryExpression
                              postfixExpression
                               primaryExpression
                                id: printf
                               operator: (
                               argumentExpressionList
                                assignmentExpression
                                 conditionalExpression
                                  logicalOrExpression
                                   logicalAndExpression
                                    inclusiveOrExpression
                                     exclusiveOrExpression
                                      andExpression
                                       equalityExpression
                                        relationalExpression
                                         shiftExpression
                                          additiveExpression
                                           multiplicativeExpression
                                            castExpression
                                             unaryExpression
                                              postfixExpression
                                               primaryExpression
                                                string: "\n%f\n"
                                operator: ,
                                assignmentExpression
                                 conditionalExpression
                                  logicalOrExpression
                                   logicalAndExpression
                                    inclusiveOrExpression
                                     exclusiveOrExpression
                                      andExpression
                                       equalityExpression
                                        relationalExpression
                                         shiftExpression
                                          additiveExpression
                                           multiplicativeExpression
                                            castExpression
                                             unaryExpression
                                              postfixExpression
                                               primaryExpression
                                                id: y
                                               operator: [
                                               expression
                                                assignmentExpression
                                                 conditionalExpression
                                                  logicalOrExpression
                                                   logicalAndExpression
                                                    inclusiveOrExpression
                                                     exclusiveOrExpression
                                                      andExpression
                                                       equalityExpression
                                                        relationalExpression
                                                         shiftExpression
                                                          additiveExpression
                                                           multiplicativeExpression
                                                            castExpression
                                                             unaryExpression
                                                              postfixExpression
                                                               primaryExpression
                                                                id: i
                                               operator: ]
                               operator: )
               operator: ;
           operator: }
      blockItem
       statement
        labeledStatement
         id: so
         operator: =
         statement
          expressionStatement
           expression
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            constant
                             int: 0
           operator: ;
      blockItem
       statement
        labeledStatement
         id: se
         operator: =
         statement
          expressionStatement
           expression
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            constant
                             int: 0
           operator: ;
      blockItem
       statement
        iterationStatement
         keyword: for
         operator: (
         forCondition
          expression
           assignmentExpression
            unaryExpression
             postfixExpression
              primaryExpression
               id: i
            assignmentOperator
             operator: =
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            constant
                             int: 1
          operator: ;
          forExpression
           assignmentExpression
            conditionalExpression
             logicalOrExpression
              logicalAndExpression
               inclusiveOrExpression
                exclusiveOrExpression
                 andExpression
                  equalityExpression
                   relationalExpression
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           id: i
                    operator: <
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           id: n
          operator: ;
          forExpression
           assignmentExpression
            conditionalExpression
             logicalOrExpression
              logicalAndExpression
               inclusiveOrExpression
                exclusiveOrExpression
                 andExpression
                  equalityExpression
                   relationalExpression
                    shiftExpression
                     additiveExpression
                      multiplicativeExpression
                       castExpression
                        unaryExpression
                         postfixExpression
                          primaryExpression
                           id: i
                          operator: ++
         operator: )
         statement
          compoundStatement
           operator: {
           blockItemList
            blockItem
             statement
              selectionStatement
               keyword: if
               operator: (
               expression
                assignmentExpression
                 conditionalExpression
                  logicalOrExpression
                   logicalAndExpression
                    inclusiveOrExpression
                     exclusiveOrExpression
                      andExpression
                       equalityExpression
                        relationalExpression
                         shiftExpression
                          additiveExpression
                           multiplicativeExpression
                            castExpression
                             unaryExpression
                              postfixExpression
                               primaryExpression
                                id: i
                            operator: %
                            castExpression
                             unaryExpression
                              postfixExpression
                               primaryExpression
                                constant
                                 int: 2
                        operator: ==
                        relationalExpression
                         shiftExpression
                          additiveExpression
                           multiplicativeExpression
                            castExpression
                             unaryExpression
                              postfixExpression
                               primaryExpression
                                constant
                                 int: 1
               operator: )
               statement
                compoundStatement
                 operator: {
                 blockItemList
                  blockItem
                   statement
                    labeledStatement
                     id: so
                     operator: =
                     statement
                      expressionStatement
                       expression
                        assignmentExpression
                         conditionalExpression
                          logicalOrExpression
                           logicalAndExpression
                            inclusiveOrExpression
                             exclusiveOrExpression
                              andExpression
                               equalityExpression
                                relationalExpression
                                 shiftExpression
                                  additiveExpression
                                   multiplicativeExpression
                                    castExpression
                                     unaryExpression
                                      postfixExpression
                                       primaryExpression
                                        id: so
                                   operator: +
                                   multiplicativeExpression
                                    castExpression
                                     unaryExpression
                                      postfixExpression
                                       primaryExpression
                                        id: y
                                       operator: [
                                       expression
                                        assignmentExpression
                                         conditionalExpression
                                          logicalOrExpression
                                           logicalAndExpression
                                            inclusiveOrExpression
                                             exclusiveOrExpression
                                              andExpression
                                               equalityExpression
                                                relationalExpression
                                                 shiftExpression
                                                  additiveExpression
                                                   multiplicativeExpression
                                                    castExpression
                                                     unaryExpression
                                                      postfixExpression
                                                       primaryExpression
                                                        id: i
                                       operator: ]
                       operator: ;
                 operator: }
               keyword: else
               statement
                compoundStatement
                 operator: {
                 blockItemList
                  blockItem
                   statement
                    labeledStatement
                     id: se
                     operator: =
                     statement
                      expressionStatement
                       expression
                        assignmentExpression
                         conditionalExpression
                          logicalOrExpression
                           logicalAndExpression
                            inclusiveOrExpression
                             exclusiveOrExpression
                              andExpression
                               equalityExpression
                                relationalExpression
                                 shiftExpression
                                  additiveExpression
                                   multiplicativeExpression
                                    castExpression
                                     unaryExpression
                                      postfixExpression
                                       primaryExpression
                                        id: se
                                   operator: +
                                   multiplicativeExpression
                                    castExpression
                                     unaryExpression
                                      postfixExpression
                                       primaryExpression
                                        id: y
                                       operator: [
                                       expression
                                        assignmentExpression
                                         conditionalExpression
                                          logicalOrExpression
                                           logicalAndExpression
                                            inclusiveOrExpression
                                             exclusiveOrExpression
                                              andExpression
                                               equalityExpression
                                                relationalExpression
                                                 shiftExpression
                                                  additiveExpression
                                                   multiplicativeExpression
                                                    castExpression
                                                     unaryExpression
                                                      postfixExpression
                                                       primaryExpression
                                                        id: i
                                       operator: ]
                       operator: ;
                 operator: }
           operator: }
      blockItem
       statement
        labeledStatement
         id: ans
         operator: =
         statement
          expressionStatement
           expression
            assignmentExpression
             conditionalExpression
              logicalOrExpression
               logicalAndExpression
                inclusiveOrExpression
                 exclusiveOrExpression
                  andExpression
                   equalityExpression
                    relationalExpression
                     shiftExpression
                      additiveExpression
                       multiplicativeExpression
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            id: h
                        operator: /
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            constant
                             int: 3
                        operator: *
                        castExpression
                         unaryExpression
                          postfixExpression
                           primaryExpression
                            operator: (
                            expression
                             assignmentExpression
                              conditionalExpression
                               logicalOrExpression
                                logicalAndExpression
                                 inclusiveOrExpression
                                  exclusiveOrExpression
                                   andExpression
                                    equalityExpression
                                     relationalExpression
                                      shiftExpression
                                       additiveExpression
                                        multiplicativeExpression
                                         castExpression
                                          unaryExpression
                                           postfixExpression
                                            primaryExpression
                                             id: y
                                            operator: [
                                            expression
                                             assignmentExpression
                                              conditionalExpression
                                               logicalOrExpression
                                                logicalAndExpression
                                                 inclusiveOrExpression
                                                  exclusiveOrExpression
                                                   andExpression
                                                    equalityExpression
                                                     relationalExpression
                                                      shiftExpression
                                                       additiveExpression
                                                        multiplicativeExpression
                                                         castExpression
                                                          unaryExpression
                                                           postfixExpression
                                                            primaryExpression
                                                             constant
                                                              int: 0
                                            operator: ]
                                        operator: +
                                        multiplicativeExpression
                                         castExpression
                                          unaryExpression
                                           postfixExpression
                                            primaryExpression
                                             id: y
                                            operator: [
                                            expression
                                             assignmentExpression
                                              conditionalExpression
                                               logicalOrExpression
                                                logicalAndExpression
                                                 inclusiveOrExpression
                                                  exclusiveOrExpression
                                                   andExpression
                                                    equalityExpression
                                                     relationalExpression
                                                      shiftExpression
                                                       additiveExpression
                                                        multiplicativeExpression
                                                         castExpression
                                                          unaryExpression
                                                           postfixExpression
                                                            primaryExpression
                                                             id: n
                                            operator: ]
                                        operator: +
                                        multiplicativeExpression
                                         castExpression
                                          unaryExpression
                                           postfixExpression
                                            primaryExpression
                                             constant
                                              int: 4
                                         operator: *
                                         castExpression
                                          unaryExpression
                                           postfixExpression
                                            primaryExpression
                                             id: so
                                        operator: +
                                        multiplicativeExpression
                                         castExpression
                                          unaryExpression
                                           postfixExpression
                                            primaryExpression
                                             constant
                                              int: 2
                                         operator: *
                                         castExpression
                                          unaryExpression
                                           postfixExpression
                                            primaryExpression
                                             id: se
                            operator: )
           operator: ;
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          id: printf
                         operator: (
                         argumentExpressionList
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          string: "\nfinal integration is %f"
                          operator: ,
                          assignmentExpression
                           conditionalExpression
                            logicalOrExpression
                             logicalAndExpression
                              inclusiveOrExpression
                               exclusiveOrExpression
                                andExpression
                                 equalityExpression
                                  relationalExpression
                                   shiftExpression
                                    additiveExpression
                                     multiplicativeExpression
                                      castExpression
                                       unaryExpression
                                        postfixExpression
                                         primaryExpression
                                          id: ans
                         operator: )
         operator: ;
      blockItem
       statement
        expressionStatement
         expression
          assignmentExpression
           conditionalExpression
            logicalOrExpression
             logicalAndExpression
              inclusiveOrExpression
               exclusiveOrExpression
                andExpression
                 equalityExpression
                  relationalExpression
                   shiftExpression
                    additiveExpression
                     multiplicativeExpression
                      castExpression
                       unaryExpression
                        postfixExpression
                         primaryExpression
                          id: getch
                         operator: (
                         operator: )
         operator: ;
     operator: }
PASSED 9
